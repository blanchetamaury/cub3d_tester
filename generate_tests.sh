#!/bin/bash

# Test generator for comprehensive cub3d test coverage
# This script generates various test files for different categories

BASE_DIR="/home/runner/work/cub3d_tester/cub3d_tester/tests"
ASSETS_PATH="./assets"

# Valid base template
create_base_valid() {
    cat << EOF
NO ${ASSETS_PATH}/debug_north.png
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 0,0,255
F 0,255,0

11111
10001
10N01
10001
11111
EOF
}

# Generate texture validation tests (focusing on edge cases)
generate_texture_tests() {
    local dir="${BASE_DIR}/texture_validation"
    local count=7
    
    # Test with very long path
    cat << EOF > "${dir}/${count}KO.cub"
NO ${ASSETS_PATH}/this/is/a/very/long/path/that/does/not/exist/texture.png
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 0,0,255
F 0,255,0

11111
10001
10N01
10001
11111
EOF
    ((count++))
    
    # Test with special characters in path
    cat << EOF > "${dir}/${count}KO.cub"
NO ${ASSETS_PATH}/special@#\$%^&*()_+.png
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 0,0,255
F 0,255,0

11111
10001
10N01
10001
11111
EOF
    ((count++))
    
    # Test with empty texture paths
    cat << EOF > "${dir}/${count}KO.cub"
NO
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 0,0,255
F 0,255,0

11111
10001
10N01
10001
11111
EOF
    ((count++))
    
    # Test with wrong case texture identifiers
    cat << EOF > "${dir}/${count}KO.cub"
no ${ASSETS_PATH}/debug_north.png
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 0,0,255
F 0,255,0

11111
10001
10N01
10001
11111
EOF
    ((count++))
    
    echo "Generated texture validation tests 07-10"
}

# Generate boundary condition tests
generate_boundary_tests() {
    local dir="${BASE_DIR}/boundary_conditions"
    local count=5
    
    # Test maximum valid RGB values
    cat << EOF > "${dir}/${count}OK.cub"
NO ${ASSETS_PATH}/debug_north.png
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 255,255,255
F 255,255,255

11111
10001
10N01
10001
11111
EOF
    ((count++))
    
    # Test minimum valid RGB values
    cat << EOF > "${dir}/${count}OK.cub"
NO ${ASSETS_PATH}/debug_north.png
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 0,0,0
F 0,0,0

11111
10001
10N01
10001
11111
EOF
    ((count++))
    
    # Test large numbers
    cat << EOF > "${dir}/${count}KO.cub"
NO ${ASSETS_PATH}/debug_north.png
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 999999,0,0
F 0,255,0

11111
10001
10N01
10001
11111
EOF
    ((count++))
    
    # Test negative numbers
    cat << EOF > "${dir}/${count}KO.cub"
NO ${ASSETS_PATH}/debug_north.png
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 0,-100,0
F 0,255,0

11111
10001
10N01
10001
11111
EOF
    ((count++))
    
    echo "Generated boundary condition tests 05-08"
}

# Generate memory stress tests (large maps)
generate_memory_tests() {
    local dir="${BASE_DIR}/memory_stress"
    local count=1
    
    # Generate a large valid map
    cat << EOF > "${dir}/${count}OK.cub"
NO ${ASSETS_PATH}/debug_north.png
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 0,0,255
F 0,255,0

111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000N000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
EOF
    ((count++))
    
    echo "Generated memory stress test 01"
}

# Generate malformed input tests
generate_malformed_tests() {
    local dir="${BASE_DIR}/malformed_input"
    local count=5
    
    # Test with tabs instead of spaces
    cat << EOF > "${dir}/${count}KO.cub"
NO	${ASSETS_PATH}/debug_north.png
WE	${ASSETS_PATH}/debug_west.png
SO	${ASSETS_PATH}/debug_south.png
EA	${ASSETS_PATH}/debug_east.png

C	0,0,255
F	0,255,0

11111
10001
10N01
10001
11111
EOF
    ((count++))
    
    # Test with mixed line endings
    printf "NO ${ASSETS_PATH}/debug_north.png\r\nWE ${ASSETS_PATH}/debug_west.png\nSO ${ASSETS_PATH}/debug_south.png\r\nEA ${ASSETS_PATH}/debug_east.png\n\nC 0,0,255\r\nF 0,255,0\n\n11111\r\n10001\n10N01\r\n10001\n11111\n" > "${dir}/${count}KO.cub"
    ((count++))
    
    # Test with Unicode characters
    cat << EOF > "${dir}/${count}KO.cub"
NO ${ASSETS_PATH}/debug_north.png
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 0,0,255
F 0,255,0

11111
1000â‘ 
10N01
10001
11111
EOF
    ((count++))
    
    echo "Generated malformed input tests 05-07"
}

# Main execution
echo "Generating comprehensive test files..."

# Create directories if they don't exist
mkdir -p "${BASE_DIR}/texture_validation"
mkdir -p "${BASE_DIR}/boundary_conditions"
mkdir -p "${BASE_DIR}/memory_stress"
mkdir -p "${BASE_DIR}/malformed_input"

# Generate tests
generate_texture_tests
generate_boundary_tests
generate_memory_tests
generate_malformed_tests

echo "Test generation complete!"