#!/bin/bash

# Extended test generator for comprehensive cub3d test coverage
# This script generates extensive test files across multiple categories

BASE_DIR="/home/runner/work/cub3d_tester/cub3d_tester/tests"
ASSETS_PATH="./assets"

# Generate encoding tests
generate_encoding_tests() {
    local dir="${BASE_DIR}/encoding_tests"
    mkdir -p "$dir"
    local count=1
    
    # Test with UTF-8 BOM
    printf "\xEF\xBB\xBFNO ${ASSETS_PATH}/debug_north.png\nWE ${ASSETS_PATH}/debug_west.png\nSO ${ASSETS_PATH}/debug_south.png\nEA ${ASSETS_PATH}/debug_east.png\n\nC 0,0,255\nF 0,255,0\n\n11111\n10001\n10N01\n10001\n11111\n" > "${dir}/${count}KO.cub"
    ((count++))
    
    # Test with spaces in color values
    cat << EOF > "${dir}/${count}KO.cub"
NO ${ASSETS_PATH}/debug_north.png
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 0, 0, 255
F 0,255,0

11111
10001
10N01
10001
11111
EOF
    ((count++))
    
    # Test with trailing whitespace
    cat << EOF > "${dir}/${count}KO.cub"
NO ${ASSETS_PATH}/debug_north.png   
WE ${ASSETS_PATH}/debug_west.png	
SO ${ASSETS_PATH}/debug_south.png  
EA ${ASSETS_PATH}/debug_east.png   

C 0,0,255  
F 0,255,0	

11111  
10001	
10N01  
10001	
11111  
EOF
    ((count++))
    
    echo "Generated encoding tests 01-03"
}

# Generate performance tests
generate_performance_tests() {
    local dir="${BASE_DIR}/performance_tests"
    mkdir -p "$dir"
    local count=1
    
    # Very wide map
    cat << EOF > "${dir}/${count}OK.cub"
NO ${ASSETS_PATH}/debug_north.png
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 0,0,255
F 0,255,0

1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111



1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
EOF
    ((count++))
    
    # Complex maze-like map
    cat << EOF > "${dir}/${count}OK.cub"
NO ${ASSETS_PATH}/debug_north.png
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 0,0,255
F 0,255,0

1111111111111111111111111111111111111111111111111
1000000000100000000010000000001000000000100000001
1011111110101111111010111111101011111110101111101
1010000000101000000010100000001010000000101000001
1010111110101011111010101111101010111110101011101
1010100000101010000010101000001010100000101010001
1010101111101010111110101011111010101111101010111
1010101000001010100000101010000010101000001010101
1010101011111010101111101010111110101011111010101
1010101010000010101000001010100000101010000010101
1010101010111110101011111010101111101010111110101
1010101010100000101010000010101000001010100000101
1010101010101111101010111110101011111010101111101
1010101010101000001010100000101010000010101000001
1010101010101011111010101111101010111110101011111
1010101010101010000010101000001010100000101010001
1010101010101010111110101011111010101111101010111
1010101010101010100000101010000010101000001010101
1010101010101010101111101010111110101011111010101
1010101010101010101000001010100000101010000010101
1010101010101010101011111010101111101010111110101
1000101010101010101010000010101000001010100000101
1111101010101010101010111110101011111010101111101
1000001010101010101010100000101010000010101000001
1011111010101010101010101111101010111110101011111
1010000010101010101010101000001010100000101010001
1010111110101010101010101011111010101111101010111
1010100000101010101010101010000010101000001010101
1010101111101010101010101010111110101011111010101
1010101000001010101010101010100000101010000010101
1010101011111010101010101010101111101010111110101
1010101010000010101010101010101000001010100000101
1010101010111110101010101010101011111010101111101
1010101010100000101010101010101010000010101000001
1010101010101111101010101010101010111110101011111
1010101010101000001010101010101010100000101010001
1010101010101011111010101010101010101111101010111
1010101010101010000010101010101010101000001010101
1010101010101010111110101010101010101011111010101
1010101010101010100000101010101010101010000010101
1010101010101010101111101010101010101010111110101
1000101010101010101000001010101010101010100000101
1111101010101010101011111010101010101010101111101
1000001010101010101010000010101010101010101000001
1011111010101010101010111110101010101010101011111
1010000010101010101010100000101010101010101010001
1010111110101010101010101111101010101010101010111
1010100000101010101010101000001010101010101010101
1010101111101010101010101011111010101010101010101
1010101000001010101010101010000010101010101010101
1010101011111010101010101010111110101010101010101
1010101010000010101010101010100000101010101010101
1010101010111110101010101010101111101010101010101
1010101010100000101010101010101000001010101010101
1010101010101111101010101010101011111010101010101
1010101010101000001010101010101010000010101010101
1010101010101011111010101010101010111110101010101
1010101010101010000010101010101010100000101010101
1010101010101010111110101010101010101111101010101
1010101010101010100000101010101010101000001010101
1010101010101010101111101010101010101011111010101
1010101010101010101000001010101010101010000010101
1010101010101010101011111010101010101010111110101
1000101010101010101010000010101010101010100000101
1111101010101010101010111110101010101010101111101
1000001010101010101010100000101010101010101000001
1011111010101010101010101111101010101010101011111
1010000010101010101010101000001010101010101010001
1010111110101010101010101011111010101010101010111
1010100000101010101010101010000010101010101010101
1010101111101010101010101010111110101010101010101
1010101000001010101010101010100000101010101010101
1010101011111010101010101010101111101010101010101
1010101010000010101010101010101000001010101010101
1010101010111110101010101010101011111010101010101
1010101010100000101010101010101010000010101010101
1010101010101111101010101010101010111110101010101
1010101010101000001010101010101010100000101010101
1010101010101011111010101010101010101111101010101
1010101010101010000010101010101010101000001010101
1010101010101010111110101010101010101011111010101
1010101010101010100000101010101010101010000010101
1010101010101010101111101010101010101010111110101
1010101010101010101000001010101010101010100000101
1010101010101010101011111010101010101010101111101
1000101010101010101010000010101010101010101000001
1111101010101010101010111110101010101010101011111
1000001010101010101010100000101010101010101010001
1011111010101010101010101111101010101010101010111
1010000010101010101010101000001010101010101010101
1010111110101010101010101011111010101010101010101
1010100000101010101010101010000010101010101010101
1010101111101010101010101010111110101010101010101
1010101000001010101010101010100000101010101010101
1010101011111010101010101010101111101010101010101
1010101010000010101010101010101000001010101010101
1010101010111110101010101010101011111010101010101
1010101010100000101010101010101010000010101010101
1010101010101111101010101010101010111110101010101
1010101010101000001010101010101010100000101010101
1010101010101011111010101010101010101111101010101
1010101010101010000010101010101010101000001010101
1010101010101010111110101010101010101011111010101
1010101010101010100000101010101010101010000010101
1010101010101010101111101010101010101010111110101
1000000000000000000000000000000000000000000000001
1111111111111111111111111111111111111111111111111
EOF
    ((count++))
    
    echo "Generated performance tests 01-02"
}

# Generate file I/O error tests
generate_file_io_tests() {
    local dir="${BASE_DIR}/file_io_errors"
    mkdir -p "$dir"
    local count=1
    
    # Test with directory instead of file
    cat << EOF > "${dir}/${count}KO.cub"
NO ${ASSETS_PATH}/
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 0,0,255
F 0,255,0

11111
10001
10N01
10001
11111
EOF
    ((count++))
    
    # Test with binary file as texture
    cat << EOF > "${dir}/${count}KO.cub"
NO /bin/bash
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 0,0,255
F 0,255,0

11111
10001
10N01
10001
11111
EOF
    ((count++))
    
    echo "Generated file I/O error tests 01-02"
}

# Generate graphics edge cases
generate_graphics_edge_cases() {
    local dir="${BASE_DIR}/graphics_edge_cases"
    mkdir -p "$dir"
    local count=1
    
    # Single cell map
    cat << EOF > "${dir}/${count}KO.cub"
NO ${ASSETS_PATH}/debug_north.png
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 0,0,255
F 0,255,0

N
EOF
    ((count++))
    
    # Map with multiple players
    cat << EOF > "${dir}/${count}KO.cub"
NO ${ASSETS_PATH}/debug_north.png
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 0,0,255
F 0,255,0

11111
1N0S1
10E01
1W001
11111
EOF
    ((count++))
    
    # Map with no player
    cat << EOF > "${dir}/${count}KO.cub"
NO ${ASSETS_PATH}/debug_north.png
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 0,0,255
F 0,255,0

11111
10001
10001
10001
11111
EOF
    ((count++))
    
    # Map with invalid characters
    cat << EOF > "${dir}/${count}KO.cub"
NO ${ASSETS_PATH}/debug_north.png
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 0,0,255
F 0,255,0

11111
1XYZ1
10N01
1ABC1
11111
EOF
    ((count++))
    
    # Empty map
    cat << EOF > "${dir}/${count}KO.cub"
NO ${ASSETS_PATH}/debug_north.png
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 0,0,255
F 0,255,0

EOF
    ((count++))
    
    # Map with only walls
    cat << EOF > "${dir}/${count}KO.cub"
NO ${ASSETS_PATH}/debug_north.png
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 0,0,255
F 0,255,0

11111
11111
11N11
11111
11111
EOF
    ((count++))
    
    echo "Generated graphics edge cases 01-06"
}

# Generate integration tests
generate_integration_tests() {
    local dir="${BASE_DIR}/integration_tests"
    mkdir -p "$dir"
    local count=1
    
    # Complete valid configuration
    cat << EOF > "${dir}/${count}OK.cub"
NO ${ASSETS_PATH}/debug_north.png
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 128,128,128
F 64,32,16

111111111111111111111
100000000000000000001
100000000000000000001
100000000000000000001
100000000000000000001
100000000000000000001
100000000000000000001
100000000000000000001
100000000000000000001
100000000000000000001
10000000N000000000001
100000000000000000001
100000000000000000001
100000000000000000001
100000000000000000001
100000000000000000001
100000000000000000001
100000000000000000001
100000000000000000001
100000000000000000001
111111111111111111111
EOF
    ((count++))
    
    # Another valid complex map
    cat << EOF > "${dir}/${count}OK.cub"
NO ${ASSETS_PATH}/debug_north.png
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 255,128,0
F 0,128,255

1111111111111111111111111
1000000000110000000000001
1011000001110000000000001
1001000000000000000000001
1111111111110000011111001
1000000000000000000001001
1000000000000000000001001
1000000000000000000001001
1000000000000000000001001
1000000000000000000001001
10000N0000000000000001001
1000000000000000000001001
1000000000000000000001001
1000000000000000000001001
1000000000000000000001001
1000000000000000000001001
1111111111110000011111001
1000000000000000000000001
1000000000000000000000001
1000000000000000000000001
1111111111111111111111111
EOF
    ((count++))
    
    echo "Generated integration tests 01-02"
}

# Create additional color tests to expand existing category
generate_additional_color_tests() {
    local dir="${BASE_DIR}/color"
    local count=9
    
    # Test RGB values with leading zeros
    cat << EOF > "${dir}/${count}KO.cub"
NO ${ASSETS_PATH}/debug_north.png
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 000,000,255
F 0,255,0

11111
10001
10N01
10001
11111
EOF
    ((count++))
    
    # Test with hex-like values
    cat << EOF > "${dir}/${count}KO.cub"
NO ${ASSETS_PATH}/debug_north.png
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 0xFF,0x00,0x00
F 0,255,0

11111
10001
10N01
10001
11111
EOF
    ((count++))
    
    # Test with scientific notation
    cat << EOF > "${dir}/${count}KO.cub"
NO ${ASSETS_PATH}/debug_north.png
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 1e2,0,0
F 0,255,0

11111
10001
10N01
10001
11111
EOF
    ((count++))
    
    # Test missing color values
    cat << EOF > "${dir}/${count}KO.cub"
NO ${ASSETS_PATH}/debug_north.png
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 
F 0,255,0

11111
10001
10N01
10001
11111
EOF
    ((count++))
    
    # Test duplicate color definitions
    cat << EOF > "${dir}/${count}KO.cub"
NO ${ASSETS_PATH}/debug_north.png
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 0,0,255
C 255,0,0
F 0,255,0

11111
10001
10N01
10001
11111
EOF
    ((count++))
    
    echo "Generated additional color tests 09-13"
}

# Create additional map tests
generate_additional_map_tests() {
    local dir="${BASE_DIR}/map"
    local count=15
    
    # Test map with holes
    cat << EOF > "${dir}/${count}KO.cub"
NO ${ASSETS_PATH}/debug_north.png
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 0,0,255
F 0,255,0

11111
10001
1 N 1
10001
11111
EOF
    ((count++))
    
    # Test irregular map shape
    cat << EOF > "${dir}/${count}KO.cub"
NO ${ASSETS_PATH}/debug_north.png
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 0,0,255
F 0,255,0

111
1N1
11111
10001
11111
EOF
    ((count++))
    
    # Test map with trailing spaces
    cat << EOF > "${dir}/${count}KO.cub"
NO ${ASSETS_PATH}/debug_north.png
WE ${ASSETS_PATH}/debug_west.png
SO ${ASSETS_PATH}/debug_south.png
EA ${ASSETS_PATH}/debug_east.png

C 0,0,255
F 0,255,0

11111   
10001   
10N01   
10001   
11111   
EOF
    ((count++))
    
    echo "Generated additional map tests 15-17"
}

# Main execution
echo "Generating comprehensive test files across all categories..."

# Generate all test categories
generate_encoding_tests
generate_performance_tests
generate_file_io_tests
generate_graphics_edge_cases
generate_integration_tests
generate_additional_color_tests
generate_additional_map_tests

echo "Extended test generation complete!"
echo "Total test files created: $(find "${BASE_DIR}" -name "*.cub" | wc -l)"